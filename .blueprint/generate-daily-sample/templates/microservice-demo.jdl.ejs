application {
 config {
   baseName store
   applicationType gateway
   packageName tech.jhipster.demo.store
   serviceDiscoveryType <%= sdType %>
   authenticationType <%= authType %>
   prodDatabaseType mysql
   buildTool <%= buildTool %>
   clientFramework <%= clientFramework %>
   enableSwaggerCodegen true
   testFrameworks [cypress]
 }
 entities *
}

application {
 config {
   baseName crm
   applicationType microservice
   packageName tech.jhipster.demo.crm
   serviceDiscoveryType <%= sdType %>
   authenticationType <%= authType %>
   cacheProvider <%= cacheType %>
   prodDatabaseType postgresql
   buildTool <%= buildTool %>
   serverPort 8081
   skipUserManagement true
 }
 entities *
}

entity Product {
   name String required
   description String
   price BigDecimal required min(0)
   productSize Size required
   image ImageBlob
}
enum Size {
   S, M, L, XL, XXL
}
entity Customer {
   firstName String required
   lastName String required
   gender Gender required
   email String required pattern(/[a-z0-9._+-]{1,20}@[a-z0-9]{3,15}\.[a-z]{2,4}/)
   phone String required
   addressLine1 String required
   addressLine2 String
   city String required
   country String required
}
enum Gender {
   MALE, FEMALE, OTHER
}
entity ProductOrder {
   placedDate Instant required
   status OrderStatus required
   code String required
   invoiceId String
}
enum OrderStatus {
   COMPLETED, PENDING, CANCELLED
}
entity OrderItem {
   quantity Integer required min(0)
   totalPrice BigDecimal required min(0)
   status OrderItemStatus required
}
enum OrderItemStatus {
   AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}
relationship ManyToOne {
  OrderItem{product(name) required} to Product
}
relationship OneToMany {
  Customer{order} to ProductOrder{customer(email) required},
  ProductOrder{orderItem} to OrderItem{order(code) required}
}

service Product, Customer, ProductOrder, OrderItem with serviceClass
paginate Product, Customer, ProductOrder, OrderItem with pagination

/* Entities for Invoice microservice */
entity Invoice {
   code String required
   date Instant required
   details String
   status InvoiceStatus required
   paymentMethod PaymentMethod required
   paymentDate Instant required
   paymentAmount BigDecimal required
}
enum InvoiceStatus {
   PAID, ISSUED, CANCELLED
}
entity Shipment {
   trackingCode String
   date Instant required
   details String
}
enum PaymentMethod {
   CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}
relationship OneToMany {
   Invoice{shipment} to Shipment{invoice(code) required}
}
service Invoice, Shipment with serviceClass
paginate Invoice, Shipment with pagination
microservice Customer, Product, ProductOrder, OrderItem, Invoice, Shipment with crm

// will be created under 'docker-compose' folder
deployment {
   deploymentType docker-compose
   appsFolders [store, crm]
   dockerRepositoryName "hipsterslabs"
   monitoring no
   serviceDiscoveryType <%= sdType %>
}

// will be created under 'kubernetes' folder
deployment {
   deploymentType kubernetes
   appsFolders [store, crm]
   dockerRepositoryName "hipsterslabs"
   gatewayType SpringCloudGateway
   monitoring no
   serviceDiscoveryType <%= sdType %>
   kubernetesNamespace jhipster
   kubernetesServiceType LoadBalancer
   istio false
}
