#
# Copyright 2013-2020 the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#----------------------------------------------------------------------
# This template is made for tasks that should be run on top of generator ti
#----------------------------------------------------------------------


steps:
#----------------------------------------------------------------------
# Set checkout path.
# Yeoman uses the package name to calculate namespaces.
# Otherwise the namespace will be the path instead of jhispter:*.
#----------------------------------------------------------------------
- checkout: self
  path: generator-jhipster
#----------------------------------------------------------------------
# Install all tools and check configuration
#----------------------------------------------------------------------
- task: NodeTool@0
  inputs:
    versionSpec: '12.16.0'
  displayName: 'TOOLS: install Node.js'
- script: |
    if [[ $JHI_JDK = '11' ]]; then
      echo '*** Using OpenJDK 11'
      sudo add-apt-repository ppa:openjdk-r/ppa
      sudo apt-get update
      sudo apt-get install -y openjdk-11-jdk
      sudo update-java-alternatives -s java-1.11.0-openjdk-amd64
      java -version
    else
      echo '*** Using OpenJDK 8'
      sudo add-apt-repository ppa:openjdk-r/ppa
      sudo apt-get update
      sudo apt-get install -y openjdk-8-jdk
      sudo update-java-alternatives -s java-1.8.0-openjdk-amd64
      java -version
    fi
  displayName: 'TOOLS: configuring OpenJDK'
- script: |
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
    sudo apt update
    sudo apt install google-chrome-stable
  displayName: 'TOOLS: install google-chrome-stable'
- script: npm install -g npm
  displayName: 'TOOLS: update NPM'
- script: npm install -g yarn
  displayName: 'TOOLS: install Yarn'
- script: |
    cd $(Build.SourcesDirectory)/test-integration/jdl-samples
    npm i
    npm start
  displayName: 'TOOLS: generating jdl-samples'
- bash: $(JHI_LOCAL_SCRIPTS)/01-display-configuration.sh
  displayName: 'TOOLS: display configuration'
- bash: $(JHI_LOCAL_SCRIPTS)/03-system.sh
  displayName: 'TOOLS: configure tools installed by the system'
- bash: $(JHI_LOCAL_SCRIPTS)/04-git-config.sh
  displayName: 'TOOLS: configure git'

#----------------------------------------------------------------------
# Install JHipster and generate project+entities
#----------------------------------------------------------------------
- bash: $(JHI_LOCAL_SCRIPTS)/10-install-jhipster-daily-builds.sh
  displayName: 'GENERATION: install JHipster'
- bash: $(JHI_LOCAL_SCRIPTS)/12-generate-project.sh
  displayName: 'GENERATION: project'
- bash: $(JHI_LOCAL_SCRIPTS)/13-replace-version-generated-project.sh
  displayName: 'GENERATION: replace version in generated project'
- bash: $(JHI_LOCAL_SCRIPTS)/14-jhipster-info.sh
  displayName: 'GENERATION: jhipster info'

#----------------------------------------------------------------------
# Bugs fix
#----------------------------------------------------------------------
# - bash: $(JHI_SCRIPTS)/20-no-memory-limit-elasticsearch.sh
#   displayName: 'BUGS-FIX: no memory limit for Elasticsearch'

#----------------------------------------------------------------------
# Launch tests
#----------------------------------------------------------------------
- bash: $(JHI_LOCAL_SCRIPTS)/23-package.sh
  displayName: 'TESTS: packaging'
- bash: $(JHI_LOCAL_SCRIPTS)/24-deploy-with-docker-compose.sh
  displayName: 'TESTS: Deploying with docker-compose files'
- bash: $(JHI_LOCAL_SCRIPTS)/25-tests-e2e-docker-compose.sh
  displayName: 'TESTS: End-to-End (Docker-Compose)'

#----------------------------------------------------------------------
# Install Minikube
#----------------------------------------------------------------------
# - bash: $(JHI_LOCAL_SCRIPTS)/26-install-minikube.sh
#   displayName: 'TOOLS: install minikube'
# - bash: $(JHI_LOCAL_SCRIPTS)/27-start-minikube-cluster.sh
#   displayName: 'TOOLS: start up minikube cluster'
# - bash: $(JHI_LOCAL_SCRIPTS)/28-deploy-with-kubernetes.sh
#   displayName: 'TESTS: Deploying with kubernetes cluster'
# - bash: $(JHI_LOCAL_SCRIPTS)/29-tests-e2e-kubernetes.sh
#   displayName: 'TESTS: End-to-End (Kubernetes)'
